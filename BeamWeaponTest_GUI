# Python 2.7 program to build a GUI for firing a type of weapon in the game (beam weapon in this case)
# GUI is ugly as I need to figure out how to arrange the widgets in a nicer configuration...
# maybe I need to make multiple frames?

import Tkinter as Tk
from random import randint

class Curry:
    def __init__(self, f, *args):
        self.f = f
        self.args = args

    def __call__(self):
        self.f(*self.args)


class Weapon:
    def __init__(self, frame, name, max_pwr):
        self.frame = frame
        self.name = name
        self.b = Tk.Button(frame, text='Fire %s' % name, command=self.fire)
        self.b.pack()
        self.var = Tk.IntVar()
        self.s = Tk.Scale(frame, from_=0, to=max_pwr, orient='horizontal', length=300, variable=self.var)
        self.s.pack()

    def fire(self):
        """ Function which activates when you press a fire button """
        # Get the target range
        tar_range = targetRange.get()
        max_range = len(fc[bw[beamType][0]])

        # Get the power of the weapon fired
        pwr = self.var.get()

        # Check if target range is within weapon limits
        hitCalc = 0
        if tar_range == 0:
            msg = "Cannot fire within same hex!"
        elif tar_range > max_range:
            msg = "Target is out of range!"
        # If target range is in limits, check that it has greater than 0 power
        elif tar_range in range(0, max_range + 1) and pwr < 1:
            msg = "Weapon needs power!"
        # If target range is in limits and it is powered...
        elif tar_range in range(0, max_range + 1) and pwr >= 1:
            print 'Firing %s at power level %d!' % (self.name, pwr)
            # Determine required roll on a 1d10
            hitCalc = fc[bw[beamType][0]][tar_range - 1]
            msg = "In Range"
            # Random roll to see if firing attempt resulted in successful hit
            rollFire = randint(1, 10)
            numberRolled["text"] = rollFire
            if rollFire > hitCalc:
                hit_result["text"] = "Sorry, you missed."
                print('Miss!')
            elif rollFire <= hitCalc:
                # If roll is a hit, then determine total damage by determining and adding damage modifiers
                hit_result["text"] = "It's a hit!"
                print('Hit!')
                dmg_mod = 0
                if tar_range in bw[beamType][2]:
                    dmg_mod = 3
                if tar_range in bw[beamType][3]:
                    dmg_mod = 2
                if tar_range in bw[beamType][4]:
                    dmg_mod = 1
                damage = pwr + dmg_mod
                dmg_result["text"] = 'Damage to target is {0}!'.format(damage)
                print('Damage to target is {0} + {1}'.format(pwr, dmg_mod))
                print'Total damage is: ', damage
            else:
                hit_result["text"] = "something went wrong..."
        else:
            msg = "Something went wrong..."

        # Show the result
        msg_result["text"] = msg
        toHitRoll["text"] = hitCalc


# Sample from Beam Weapon dictionaries
# fc is a dictionary for the Firing Chart
# The Key (a letter) pairs to a list of "to-hit" values indexed by the range to target (index 0 is range = 1)
fc = {'R': [10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 3, 2, 1]}

# bw is a dictionary for a sample beam weapon
# bw[0] = Firing Chart, bw[1] = maximum weapon power, bw[2] through bw[4] are damage modifiers,
#  +3 dmg, +2 dmg, +1 dmg respectively
bw = {'FH-5': ['R', 4, range(0), range(1, 9), range(9, 17)]}

# Enter Beam Weapon Data
beamType = 'FH-5'
weaponMaxPwr = bw[beamType][1]
beamWepCount = input("How many beam weapons: ")

# Dynamically create weapon array (a list of two-item lists of weapon name and max power)
# Easy! Because all the weapons have the same name (same type) and same max power!
weapon_array = []
weapon_info = [beamType, bw[beamType][1]]
for ii in range(0, beamWepCount):
    weapon_array.append(weapon_info)

# Print beam weapon array to test
print(weapon_array)

# Create root window
root = Tk.Tk()
root.title("Fire Weapons")

# Tk variables
targetRange = Tk.IntVar()

# Create default (static) widgets
targetRangeLabel = Tk.Label(root, text="Target Range")
targetRangeLabel.pack()         # grid(row=1, column=1)
targetRangeScale = Tk.Scale(root, from_=0, to=24, orient='horizontal', length=300, variable=targetRange)
targetRangeScale.pack()         # grid(row=1, column=2)
beamWepLabel = Tk.Label(root, text="Beam Type")
beamWepLabel.pack()             # grid(row=2, column=1)
beamChartLabel = Tk.Label(root, text=("Firing chart---{} Max Range---{}".format(bw[beamType][0],
                                                                                len(fc[bw[beamType][0]]))))
beamChartLabel.pack()           # grid(row=2, column=2)
firedLabel = Tk.Label(root, text="Weapon Fired?")
firedLabel.pack()               # grid(row=2, column=3)

for name, mx in weapon_array:
    Weapon(root, name, mx)

# Check the To-Hit Roll and number rolled
toHitLabel = Tk.Label(root, text="To Hit:")
toHitLabel.pack()               # grid(row=beamWepCount + 4, column=1)
toHitRoll = Tk.Label(root, text="?")
toHitRoll.pack()                # grid(row=beamWepCount + 4, column=2)
rolledLabel = Tk.Label(root, text="Number rolled:")
rolledLabel.pack()              # grid(row=beamWepCount + 5, column=1)
numberRolled = Tk.Label(root, text="?")
numberRolled.pack()             # grid(row=beamWepCount + 5, column=2)

# Print message to user for target range issues
msg_result = Tk.Label(root, text="Good Luck!", bg="white")
msg_result.pack()               # grid(row=beamWepCount + 6, column=2)

# Print message to user to indicate hit or miss (want message to be visible for only a short time)
hitResultLabel = Tk.Label(root, text="Hit Result:")
hitResultLabel.pack()           # grid(row=beamWepCount + 7, column=1)
hit_result = Tk.Label(root, text="?")
hit_result.pack()               # grid(row=beamWepCount + 7, column=2)

# Print message to user to indicate damage result from a hit
damageResultLabel = Tk.Label(root, text="Damage Result:")
damageResultLabel.pack()        # grid(row=beamWepCount + 8, column=1)
dmg_result = Tk.Label(root, text="?")
dmg_result.pack()               # grid(row=beamWepCount + 8, column=2)

root.mainloop()
